$grid-columns: 12;
$grid-gutter: 16px;

$breakpoints: (
  default: (
    columns: $grid-columns,
    gutter: $grid-gutter
  ),
  sm: (
    max-width: $mobile-width - 1,
    gutter: 2*$grid-gutter,
    columns: 4
  ),
  md: (
    min-width: $mobile-width,
    max-width: 959px,
    gutter: 3*$grid-gutter,
    columns: 8
  ),
  lg: (
    min-width: $desktop-width,
    //max-width: 1439px
  ),
  xl: (
    min-width: $desktop-width-large
  )
);


/*
  just don't touch the shit below.

  does this mean i have to refactor this?
  yes, i probably do.
  for now: i really don't want to. simple as that.
 */


@mixin media-breakpoint($name) {
  @if (not map_has_key($breakpoints, $name)) {
    @content;
  }
  @else
  {
    $bpConfig: map-get($breakpoints, $name);
    $config: map-merge(map-get($breakpoints,'default'), $bpConfig);
    $minWidth: if(map-has_key($config, 'min-width') ,map-get($config,'min-width'),null);
    $maxWidth: if(map-has_key($config, 'max-width') ,map-get($config,'max-width'),null);
    @if ($minWidth != null and $maxWidth != null)
    {
      @media (min-width: $minWidth) and (max-width: $maxWidth) {
        @content;
      }
    }
    @else if ($maxWidth != null)
    {
      @media (max-width: $maxWidth) {
        @content;
      }
    }
    @else if ($minWidth != null)
    {
      @media (min-width: $minWidth) {
        @content;
      }
    }
    @else
    {
      @content;
    }
  }
}
.row
{
  display: flex;
  flex-flow: row wrap;
}
%base-grid-column {
  position: relative;
  width: 100%;
  min-height: 1px;
  box-sizing: border-box;
  padding-left: ($grid-gutter / 2);
  padding-right: ($grid-gutter / 2);
}
@function selector-unique($sel1, $sel2) {
  @if ($sel1 == $sel2) {
    @return $sel1;
  }
  @return "#{$sel1},#{$sel2}";
}
@mixin make-grid-breakpoint($bpName, $bpConfig)
{
  $suffix: if($bpName == "default", "", "-#{$bpName}");
  $config: map-merge(map-get($breakpoints, 'default'), $bpConfig);
  $columns: map-get($config, 'columns');

  %grid-column#{$suffix} {
    @extend %base-grid-column;
  }

  @for $i from 1 through $columns {
    // every breakpoint becomes 100% wide by default outside of it's breakpoint
    .col#{$suffix}-#{$i} {
      @extend %grid-column#{$suffix};
    }
  }
  .col#{$suffix},
  .col#{$suffix}-auto
  {
    @extend %grid-column#{$suffix};
  }

  @include media-breakpoint($bpName) {
    $gutter: if(map-has_key($bpConfig, 'gutter'), map-get($config,'gutter'), null);
    .row {
      @if ($gutter != null) {
        margin-left: ($gutter / -2);
        margin-right: ($gutter / -2);
      }
    }

    %base-col#{$suffix}
    {
      @if ($gutter != null) {
        padding-left: ($gutter / 2);
        padding-right: ($gutter / 2);
      }
    }
    #{selector-unique(".col",".col#{$suffix}")}
    {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
      @extend %base-col#{$suffix} !optional;
    }
    #{selector-unique(".col-auto",".col#{$suffix}-auto")}
    {
      flex: 0 0 auto;
      width: auto;
      max-width: none;
      @extend %base-col#{$suffix} !optional;
    }
    @for $i from 1 through $columns {
      $width: percentage($i / $columns);

      #{selector-unique(".col-#{$i}",".col#{$suffix}-#{$i}")}
      {
        flex: 0 0 $width;
        max-width: $width;
        @extend %base-col#{$suffix} !optional;
      }

      #{selector-unique(".col-offset-#{$i}",".col-offset#{$suffix}-#{$i}")}
      {
        margin-left: $width;
      }
    }
  }
}


@mixin make-responsive-utilities($bpName, $bpConfig)
{
  $suffix: if($bpName == "default", "", "-#{$bpName}");
  $minWidth: if(map-has_key($bpConfig,'min-width'),map-get($bpConfig,'min-width'),null);
  $maxWidth: if(map-has_key($bpConfig,'max-width'),map-get($bpConfig,'max-width'),null);
  @if($minWidth != null) {
    @media (min-width: $minWidth) {
      .hidden#{$suffix}-up { display: none; }
    }
  }
  @if($maxWidth != null) {
    @media (max-width: $maxWidth) {
      .hidden#{$suffix}-down { display: none; }
    }
  }
}

@each $bpName, $bpConfig in $breakpoints {
  @include make-grid-breakpoint($bpName, $bpConfig);
}
@each $bpName, $bpConfig in $breakpoints {
  @include make-responsive-utilities($bpName, $bpConfig);
}
